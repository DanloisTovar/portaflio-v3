export default {
	extends: ['@commitlint/config-conventional'], // usa la convenci√≥n est√°ndar

	rules: {
		// Tipo de commit obligatorio y restringido a los m√°s usados
		'type-enum': [
			2,
			'always',
			[
				'feat', // nueva funcionalidad
				'fix', // correcci√≥n de bug
				'chore', // tareas de mantenimiento
				'docs', // documentaci√≥n
				'style', // estilo, formato o limpieza de c√≥digo
				'refactor', // refactorizaci√≥n de c√≥digo
				'test', // pruebas
				'perf', // optimizaci√≥n de rendimiento
			],
		],

		// Scope opcional, recomendado si quieres m√°s control en commits grandes
		'scope-empty': [2, 'never'],

		// T√≠tulo obligatorio con longitud m√≠nima y m√°xima
		'subject-min-length': [2, 'always', 5],
		'subject-max-length': [2, 'always', 72],

		// Cuerpo opcional pero si existe debe tener m√≠nimo 10 caracteres
		'body-min-length': [2, 'always', 10],

		// No permitir puntos al final del subject
		'subject-full-stop': [2, 'never', '.'],
	},
};

// Explicaci√≥n de las reglas:

// 'type-enum': Define los tipos de commit permitidos para mantener consistencia.
// 'scope-empty': Obliga a definir un scope para mayor claridad en cambios grandes.
// 'subject-min-length' y 'subject-max-length': Aseguran que el t√≠tulo sea conciso pero descriptivo.
// 'body-min-length': Fomenta descripciones detalladas cuando se incluye un cuerpo.
// 'subject-full-stop': Evita puntos al final del t√≠tulo para mantener un formato limpio.
// Puedes personalizar estas reglas seg√∫n las necesidades de tu proyecto.

// !Ejemplo de uso:
/*

1Ô∏è‚É£ 'scope-empty': [2, 'never']

‚ÅâÔ∏è Qu√© significa:
Esta regla controla si el scope de un commit puede estar vac√≠o o no.
El scope es la parte opcional dentro del commit que indica sobre qu√© √°rea del proyecto est√°s trabajando, por ejemplo:

‚úÖ feat(navbar): agregar bot√≥n de login

üëç Aqu√≠ el scope es navbar.


‚öôÔ∏è Configuraci√≥n [2, 'never']:

2 ‚Üí nivel de severidad error (el commit falla si no cumple).

'never' ‚Üí nunca puede estar vac√≠o, es decir, siempre debes poner un scope.

‚ÅâÔ∏è Por qu√© es √∫til profesionalmente:

Ayuda a organizar commits grandes, especialmente en proyectos con muchas funcionalidades.

Facilita filtrar cambios por √°rea en changelogs o revisiones de c√≥digo.

==============================================

2Ô∏è‚É£ 'subject-min-length': [2, 'always', 5]

‚ÅâÔ∏èQu√© significa:
Esta regla define la longitud m√≠nima del subject (la primera l√≠nea del commit).

‚öôÔ∏è Configuraci√≥n [2, 'always', 5]:

2 ‚Üí error si no cumple.

'always' ‚Üí se aplica siempre.

5 ‚Üí m√≠nimo 5 caracteres.

Ejemplo correcto:
‚úÖ fix: corregir error en login

Ejemplo incorrecto:

‚ùå fix: x

‚ÅâÔ∏è Por qu√© es √∫til profesionalmente:

Evita commits con t√≠tulos demasiado cortos o vagos.

Mantiene claridad y contexto desde el t√≠tulo.

==============================================

3Ô∏è‚É£ 'subject-max-length': [2, 'always', 72]

‚ÅâÔ∏è Qu√© significa:
Longitud m√°xima del subject. Commitlint recomienda m√°ximo 72 caracteres seg√∫n la convenci√≥n est√°ndar.

Por qu√© 72 caracteres:

Para que el t√≠tulo se vea completo en git log, herramientas de CI/CD, GitHub y changelogs autom√°ticos.

Ejemplo correcto:

‚úÖ feat: agregar navbar responsivo con animaciones y botones de login

Ejemplo incorrecto:

‚ùå feat: agregar navbar, dropdowns, animaciones, botones, pruebas unitarias, estilos y documentaci√≥n completa

‚ÅâÔ∏è Beneficio profesional:

Commit limpio, f√°cil de leer y consistente.

==============================================

4Ô∏è‚É£ 'body-min-length': [2, 'always', 10]

‚ÅâÔ∏è Qu√© significa:
Si el commit tiene cuerpo (body), debe tener un m√≠nimo de caracteres.

‚öôÔ∏è Configuraci√≥n [2, 'always', 10]:

2 ‚Üí error si no cumple.

'always' ‚Üí siempre que haya body.

10 ‚Üí m√≠nimo 10 caracteres.

Ejemplo correcto:

‚úÖ feat(navbar): agregar bot√≥n de login

Se a√±adi√≥ el bot√≥n de login en la navbar y se ajust√≥ su estilo.

Ejemplo incorrecto:

‚ùå feat(navbar): agregar bot√≥n

ok

‚ÅâÔ∏è Por qu√© es √∫til profesionalmente:

Garantiza que las descripciones sean claras y detalladas, no solo t√≠tulos cortos.

Facilita revisiones de c√≥digo y generaci√≥n de changelogs.

==============================================

5Ô∏è‚É£ 'subject-full-stop': [2, 'never', '.']

‚ÅâÔ∏èQu√© significa:
Controla si el subject puede terminar con un punto (.) o no.

‚öôÔ∏è Configuraci√≥n [2, 'never', '.']:

2 ‚Üí error si no cumple.

'never' ‚Üí el subject no debe terminar con punto.

'.' ‚Üí el car√°cter prohibido.

Ejemplo correcto:

‚úÖ fix(navbar): corregir bug en dropdown

Ejemplo incorrecto:

‚ùå fix(navbar): corregir bug en dropdown.

‚ÅâÔ∏è Por qu√© es √∫til profesionalmente:

Mantiene consistencia en commits.

La convenci√≥n est√°ndar de Conventional Commits indica que el subject no debe tener punto final, mientras que el body s√≠ puede.

üéØ En resumen, estas reglas ayudan a mantener un historial de commits claro, consistente y profesional. Aqu√≠ tienes una tabla resumen:

üí° Tabla resumen de reglas de commit:

| Regla                | Nivel | Qu√© hace                   | Beneficio                     |
| -------------------- | ----- | -------------------------- | ----------------------------- |
| `scope-empty`        | 2     | Obliga a poner scope       | Organiza commits grandes      |
| `subject-min-length` | 2     | T√≠tulo m√≠nimo 5 chars      | Evita t√≠tulos vagos           |
| `subject-max-length` | 2     | T√≠tulo m√°ximo 72 chars     | Commit limpio y legible       |
| `body-min-length`    | 2     | Body m√≠nimo 10 chars       | Descripci√≥n clara y detallada |
| `subject-full-stop`  | 2     | No permitir punto al final | Consistencia con convenci√≥n   |


*/

// M√°s informaci√≥n en https://commitlint.js.org/#/guides-local-setup
